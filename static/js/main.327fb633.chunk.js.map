{"version":3,"sources":["App.js","tables/Regular.js","tables/Reverse.js","tables/Overlap.js","serviceWorker.js","index.js"],"names":["transactions","useState","rowsPerPage","setRowsPerPage","page","setPage","rows","slice","map","transaction","TableRow","key","id","TableCell","date","format","description","align","amount","balance","Table","size","TableHead","TableBody","TableFooter","TablePagination","colSpan","count","length","SelectProps","inputProps","native","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value","rowsPerPageOptions","calculateRowRange","r","from","to","offset","getLastPage","Math","max","ceil","range","useMemo","newRowsPerPage","labelDisplayedRows","context","iFrom","iTo","availableBefore","availableAfter","before","min","after","console","log","contextFrom","contextTo","colours","i","push","transactionIndex","style","backgroundColor","opacity","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","baseDate","moment","clone","add","App","classes","className","clsx","Grid","container","item","xs","Typography","title","variant","noWrap","Regular","Reverse","Overlap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.327fb633.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport './App.css';\nimport Regular from './tables/Regular';\nimport Reverse from './tables/Reverse';\nimport Overlap from './tables/Overlap';\nimport clsx from 'clsx';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst baseDate = moment('2020-01-01');\nlet balance = 0;\nconst transactions = [];\nfor (let i=0; i<20; i++) {\n  balance += i;\n  transactions.push(\n    {\n      id: i,\n      date: baseDate.clone().add(i, 'days'),\n      description: `Transaction ${i}`,\n      amount: i,\n      balance\n    }\n  );\n}\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className={clsx(\"App\", classes.root)}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Typography className={classes.title} variant=\"h6\" noWrap>Regular</Typography>\n          <Regular transactions={transactions}/>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography className={classes.title} variant=\"h6\" noWrap>Reverse</Typography>\n          <Reverse transactions={transactions}/>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography className={classes.title} variant=\"h6\" noWrap>Overlap</Typography>\n          <Overlap transactions={transactions}/>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nexport default function ({ transactions }) {\n    const [rowsPerPage, setRowsPerPage] = useState(3);\n    const [page, setPage] = useState(0);\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n      };\n    const handleChangePage = (event, newPage) => setPage(newPage);\n    const rows = transactions\n        .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n        .map(transaction => (\n        <TableRow key={transaction.id}>\n            <TableCell>{transaction.date.format('YYYY-MM-DD')}</TableCell>\n            <TableCell>{transaction.description}</TableCell>\n            <TableCell align=\"right\">{transaction.amount}</TableCell>\n            <TableCell align=\"right\">{transaction.balance}</TableCell>\n        </TableRow>\n        ));\n    return (\n        <Table size=\"small\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Description</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                    <TableCell align=\"right\">Balance</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {rows}\n            </TableBody>\n            <TableFooter>\n                <TableRow>\n                    <TablePagination\n                        colSpan={4}\n                        count={transactions.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        SelectProps={{\n                            inputProps: { 'aria-label': 'rows per page' },\n                            native: true,\n                        }}\n                        onChangePage={handleChangePage}\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\n                        rowsPerPageOptions={[3, 4, 5]}\n                    />\n                </TableRow>\n            </TableFooter>\n        </Table>\n    );\n}","import React, { useState, useMemo } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst calculateRowRange = ({ page, rowsPerPage, count }) => {\n    const r = count % rowsPerPage;\n\n    // If r is zero then the paging is normal\n    if (r === 0) {\n        return {\n            from: page * rowsPerPage,\n            to: page * rowsPerPage + rowsPerPage - 1\n        }\n    // Else create a short first page range and offset the rest\n    } else {\n        // First page has r items\n        if (page === 0) {\n            return {\n                from: 0,\n                to: r - 1\n            };\n        // Rest are full, but offset by r\n        } else {\n            const offset = ((page - 1) * rowsPerPage) + r;\n            return {\n                from: offset,\n                to: offset + rowsPerPage - 1\n            };\n        }\n    }\n};\n\nconst getLastPage = (count, rowsPerPage) => Math.max(\n    0,\n    Math.ceil(count / rowsPerPage) - 1\n);\n\nexport default function ({ transactions }) {\n    const [rowsPerPage, setRowsPerPage] = useState(3);\n    const [page, setPage] = useState(getLastPage(transactions.length, rowsPerPage));\n    const lastPage = useMemo(\n        () => getLastPage(transactions.length, rowsPerPage),\n        [transactions, rowsPerPage]);\n\n    const handleChangeRowsPerPage = (event) => {\n        const newRowsPerPage = parseInt(event.target.value, 10);\n        setRowsPerPage(newRowsPerPage);\n        // console.log(\"Recalculated lastPage\", {len: transactions.length, rowsPerPage, lastPage: getLastPage(transactions.length, rowsPerPage)})\n        setPage(getLastPage(transactions.length, newRowsPerPage));\n    };\n    const handleChangePage = (event, newPage) => setPage(newPage);\n\n    const labelDisplayedRows = ({ from, to, count, page }) => {\n        const range = calculateRowRange({ page, rowsPerPage, count });\n        return `Row ${range.from + 1} - ${range.to + 1} of ${count}`;\n    };\n\n    const range = calculateRowRange({ page, rowsPerPage, count: transactions.length });\n\n    const rows = transactions\n        .slice(range.from, range.to + 1)\n        .map(transaction => (\n            <TableRow key={transaction.id}>\n                <TableCell>{transaction.date.format('YYYY-MM-DD')}</TableCell>\n                <TableCell>{transaction.description}</TableCell>\n                <TableCell align=\"right\">{transaction.amount}</TableCell>\n                <TableCell align=\"right\">{transaction.balance}</TableCell>\n            </TableRow>\n        ));\n    return (\n        <Table size=\"small\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Description</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                    <TableCell align=\"right\">Balance</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {rows}\n            </TableBody>\n            <TableFooter>\n                <TableRow>\n                    <TablePagination\n                        colSpan={4}\n                        count={transactions.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        SelectProps={{\n                            inputProps: { 'aria-label': 'rows per page' },\n                            native: true,\n                        }}\n                        onChangePage={handleChangePage}\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\n                        labelDisplayedRows={labelDisplayedRows}\n                        rowsPerPageOptions={[3, 4, 5]}\n                    />\n                </TableRow>\n            </TableFooter>\n        </Table>\n    );\n}","import React, { useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst calculateRowRange = ({ from, to, count, context }) => {\n\n    // from and to are indexed from 1\n    const iFrom = from -1;\n    const iTo = to - 1;\n\n    // Available before\n    const availableBefore = Math.max(0, iFrom);\n    const availableAfter = count - iTo - 1;\n\n    const before = Math.min(availableBefore, context);\n    const after = Math.min(availableAfter, context);\n\n    console.log({\n        from,\n        to,\n        iFrom,\n        iTo,\n        count,\n        context,\n        availableBefore,\n        availableAfter,\n        before,\n        after\n    });\n\n    const contextFrom = from - before;\n    const contextTo = to + after;\n\n    const colours = [];\n    for (let i=0; i < before; i++) {\n        colours.push(\"lightyellow\");\n    }\n    for (let i=0; i < iTo - iFrom + 1; i++) {\n        colours.push(null);\n    }\n    for (let i=0; i < after; i++) {\n        colours.push(\"lightyellow\");\n    }\n\n    return {\n        from: contextFrom,\n        to: contextTo,\n        colours\n    };\n};\n\nexport default function ({ transactions }) {\n    const [rowsPerPage, setRowsPerPage] = useState(3);\n    const [page, setPage] = useState(0);\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n      };\n    const handleChangePage = (event, newPage) => setPage(newPage);\n\n    const from = page * rowsPerPage + 1;\n    const to = page * rowsPerPage + rowsPerPage;\n    const range = calculateRowRange({from, to, count: transactions.length, context: rowsPerPage});\n\n    const labelDisplayedRows = ({from, to, count, page}) => {\n        return `Row ${range.from} - ${range.to} of ${count}`;\n    };\n\n    const rows = transactions\n        .slice(range.from - 1, range.to)\n        .map((transaction, transactionIndex) => (\n        <TableRow\n            key={transaction.id}\n            style={{\n                backgroundColor: range.colours[transactionIndex],\n                opacity: range.colours[transactionIndex] ? \"30%\" : \"100%\"\n            }}\n        >\n            <TableCell>{transaction.date.format('YYYY-MM-DD')}</TableCell>\n            <TableCell>{transaction.description}</TableCell>\n            <TableCell align=\"right\">{transaction.amount}</TableCell>\n            <TableCell align=\"right\">{transaction.balance}</TableCell>\n        </TableRow>\n        ));\n    return (\n        <Table size=\"small\">\n            <TableHead>\n                <TableRow>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Description</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                    <TableCell align=\"right\">Balance</TableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n                {rows}\n            </TableBody>\n            <TableFooter>\n                <TableRow>\n                    <TablePagination\n                        colSpan={4}\n                        count={transactions.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        SelectProps={{\n                            inputProps: { 'aria-label': 'rows per page' },\n                            native: true,\n                        }}\n                        onChangePage={handleChangePage}\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\n                        labelDisplayedRows={labelDisplayedRows}\n                        rowsPerPageOptions={[3, 4, 5]}\n                    />\n                </TableRow>\n            </TableFooter>\n        </Table>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}